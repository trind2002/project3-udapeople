version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      stack_name:
        type: string
    steps:
      - run:
          name: Destroy environments <<parameters.stack_name>>
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name "<<parameters.stack_name>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/DPNEerxZ3djdxtferEir3s/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if [ "$SUCCESS" = "1" ];
            then
              cd ~/project/backend
              npm install
              #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run frontend test
          command: |
             # Your code here
             cd frontend
             npm install
             npm run test
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run backend test
          command: |
             # Your code here
             cd backend
             npm install
             npm run test
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run scan frontend
          command: |
             # Your code here
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
             npm audit fix --force
             npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run scan backend
          command: |
             # Your code here
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
             npm audit fix --force
             npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - save_cache:
          paths:
            - .circleci/ansible/inventory.txt
          key: inventory-{{ .Revision  }}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["2c:59:b2:64:36:60:62:cf:0f:83:c8:72:53:ad:22:b8"] # You can get this ID in the section where you registered the SSH Key
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure   
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            ## Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here
            cd backend
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl --insecure https://kvdb.io/DPNEerxZ3djdxtferEir3s/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              curl --insecure https://kvdb.io/DPNEerxZ3djdxtferEir3s/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
              echo "No migration has been executed."
            fi            
     # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          stack_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
      # docker:
      # Docker image here that supports AWS CLI
      
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: "Install AWS CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [frontend-build]   
      - restore_cache:
          key: inventory-{{ .Revision  }}
      
      - run:
          name: Get backend url
          command: |
            # your code here            
            export BACKEND_IP=$(cat .circleci/ansible/inventory.txt | tail -n 1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          stack_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations         
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - restore_cache:
          key: inventory-{{ .Revision  }}
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["2c:59:b2:64:36:60:62:cf:0f:83:c8:72:53:ad:22:b8"]
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
            apk add --no-cache tar
            pip install --upgrade awscli
            apk add --no-cache npm
            apk add --no-cache curl
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            ## Zip the directory
            tar -C backend -czvf .circleci/ansible/roles/deploy/artifact/artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
  smoke-test:
    docker:
      # Lightweight Docker image
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y curl tar nodejs npm gzip 
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"            
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo "successful test"
              return 0              
            else
              echo "failed test"
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          stack_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
            